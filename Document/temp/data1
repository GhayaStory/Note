package com.nazhisoft.school.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.nazhisoft.school.entity.*;
import com.nazhisoft.school.mapper.SchoolYearMapper;
import com.nazhisoft.school.mapper.StudentInfoMapper;
import com.nazhisoft.school.service.*;
import com.nazhisoft.school.util.SchoolStatus;
import com.nazhisoft.vo.PageBean;
import com.nazhisoft.vo.ReturnResult;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.util.*;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/use")
public class UseController {

    private static Logger logger = LoggerFactory.getLogger(UseController.class);

    @Autowired
    private ISchoolYearService iSchoolYearService;
    @Autowired
    private ISchoolTermService iSchoolTermService;
    @Autowired
    private ICurrentTermService iCurrentTermService;
    @Autowired
    private ISchoolService iSchoolService;
    @Autowired
    private IGradeService iGradeService;
    @Autowired
    private IClassService iClassService;
    @Autowired
    private ISysGradeService iSysGradeService;
    @Autowired
    private IStudentInfoService iStudentInfoService;
    @Autowired
    private StudentInfoMapper studentInfoMapper;
    @Autowired
    private ITeacherService iTeacherService;


    @Resource
    private SchoolYearMapper schoolYearMapper;




    /**
     * 查询学年
     *
     * @return
     */
    @RequestMapping("/getSchoolYearList")
    @ResponseBody
    public ReturnResult getSchoolYearList() {
        ReturnResult result = new ReturnResult();
        String strError = "查询学年失败";
        try {
            List<SchoolYear> list = iSchoolYearService.list();
            result.setDataList(list);
            result.setCode(1);
            result.setNote("成功");
        } catch (Exception e) {
            e.printStackTrace();
            result.setCode(-1);
            result.setMsg(e.getMessage());
        }
        result.setNote((result.getNote() == null || "".equals(result.getNote())) ? strError : result.getNote());
        return result;
    }

    /**
     * 根据学期id查询学年列表
     *
     * @return
     */
    @RequestMapping("/getSchoolYearListByTermId")
    public ReturnResult getSchoolYearListByTermId(@RequestParam("termId") String termId){
        ReturnResult result = new ReturnResult();
        String strError = "查询学年失败";
        try {
            List<Map<String, Object>> list = schoolYearMapper.getSchoolYearListByTermId(Integer.parseInt(termId));
            result.setDataList(list);
            result.setCode(1);
            result.setNote("成功");
        } catch (Exception e) {
            e.printStackTrace();
            result.setCode(-1);
            result.setMsg(e.getMessage());
        }
        result.setNote((result.getNote() == null || "".equals(result.getNote())) ? strError : result.getNote());

        return result;
    }

    /**
     * 根据学年id查询学期列表
     *
     * @return
     */
    @RequestMapping("/getSchoolTermListBySchoolYearId")
    public ReturnResult getSchoolTermListBySchoolYearId(@RequestParam("schoolYearId") Integer schoolYearId,
                                                        @RequestParam("schoolId") Integer schoolId){
        ReturnResult result = new ReturnResult();
        String strError = "查询学期失败";
        try {
            List<Map<String, Object>> list = iSchoolTermService.listMaps(new QueryWrapper<SchoolTerm>()
                                          .eq("school_year_id", schoolYearId)
                                          .orderByAsc("id"));

            Map<String, Object> map = iCurrentTermService.getMap(new QueryWrapper<CurrentTerm>()
                    .eq("t_school_id", schoolId));
            result.setDataList(list);
            result.setReturnData(map);
            result.setCode(1);
            result.setNote("成功");
        } catch (Exception e) {
            e.printStackTrace();
            result.setCode(-1);
            result.setMsg(e.getMessage());
        }
        result.setNote((result.getNote() == null || "".equals(result.getNote())) ? strError : result.getNote());
        return result;
    }



    /**
     * 查询学期
     *
     * @return
     */
    @RequestMapping("/getSchoolTermList")
    @ResponseBody
    public List<SchoolTerm> getSchoolTermList() {
        List<SchoolTerm> result = new ArrayList<>();
        String strError = "查询学期失败";
        try {
            result = iSchoolTermService.list();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }


    /**
     * 查询学校学期(分页)
     *
     * @param map
     * @return
     */
    @RequestMapping("/pageQueryTermBySchoolId")
    @ResponseBody
    public ReturnResult pageQueryTermBySchoolId(@RequestBody Map<String, Object> map) {

        ReturnResult result = new ReturnResult();
        int pageNo = Integer.parseInt(map.get("pageNo").toString());
        int pageSize = Integer.parseInt(map.get("pageSize").toString());
        PageBean pageBean = new PageBean();
        pageBean.setPageNo(pageNo);
        pageBean.setPageSize(pageSize);
        int count = iSchoolTermService.count();
        pageBean.setTotalNum(count);

        Page<SchoolTerm> page = new Page<>(pageNo, pageSize);
        QueryWrapper<SchoolTerm> wrap = new QueryWrapper<>();

        Page<SchoolTerm> pageResult = iSchoolTermService.page(page, wrap);


        if (map.get("schoolId") != null && !"".equals(map.get("schoolId").toString()) && !"0".equals(map.get("schoolId").toString())) {
            QueryWrapper<CurrentTerm> wrap_currentTerm = new QueryWrapper<>();
            wrap_currentTerm.eq("t_school_id", map.get("schoolId").toString());
            CurrentTerm res_currentTerm = iCurrentTermService.getOne(wrap_currentTerm);

            for (SchoolTerm temp : pageResult.getRecords()) {
                if (temp.getId().equals(res_currentTerm.getTSchoolTermId())) {
                    temp.setFlag(1);
                } else {
                    temp.setFlag(0);
                }
            }
        }

        result.setDataList(page.getRecords());
        result.setPageBean(pageBean);
        result.setCode(1);
        result.setNote("成功");

        return result;
    }

    /**
     * 查询当前学期
     *
     * @param schoolId
     * @return
     */
    @RequestMapping("/getCurrentTermBySchoolId")
    public CurrentTerm getCurrentTermBySchoolId(@RequestParam("schoolId") Integer schoolId) {
        return iCurrentTermService.getOne(new QueryWrapper<CurrentTerm>().eq("t_school_id", schoolId));
    }


    /**
     * 查询所有学校
     *
     * @return
     */
    @RequestMapping("/getAllSchoolList")
    public List<School> getAllSchoolList() {//(重复)
        return iSchoolService.list(new QueryWrapper<School>().eq("status", SchoolStatus.START.getValue()));
    }

    /**
     * 查询本校所有年级
     *
     * @param schoolId
     * @return
     */
    @RequestMapping("/getGradeListBySchoolId")
    public List<Grade> getGradeListBySchoolId(@RequestParam("schoolId") Integer schoolId) {
        return iGradeService.list(new QueryWrapper<Grade>().eq("school_id", schoolId));
    }

    /**
     * 根据schoolID和学期查询本校所有年级
     * @param schoolId
     * @return
     */
    @RequestMapping("/getGradeListBySchoolIdAndTermId")
    public List<Grade> getGradeListBySchoolIdAndTermId(@RequestParam("schoolId") Integer schoolId,
                                                       @RequestParam("termId") Integer termId) {
        return iGradeService.list(new QueryWrapper<Grade>().eq("school_id",schoolId).eq("term_id",termId));
    }

    /**
     * 查询本校所有班级
     *
     * @param schoolId
     * @return
     */
    @RequestMapping("/getClassListBySchoolId")
    public List<Clazz> getClassListBySchoolId(@RequestParam("schoolId") Integer schoolId) {
        return iClassService.list(new QueryWrapper<Clazz>().eq("school_id", schoolId));
    }


    /**
     * 查询所有学校信息（分页）
     * jQueryAutocomplete插件过滤学校信息
     *
     * @param map
     * @return result
     */
    @RequestMapping("/listSchoolAutocomplete")
    @ResponseBody
    public ReturnResult listSchoolAutocomplete(@RequestBody HashMap<String, Object> map) {
        ReturnResult result = new ReturnResult();
        String strError = "查询学校信息异常";
        try {
            int pageNo = Integer.parseInt(map.get("pageNo").toString());
            int pageSize = Integer.parseInt(map.get("pageSize").toString());
            String key = map.get("key") == null ? "" : map.get("key").toString();
            PageBean pageBean = new PageBean();
            pageBean.setPageNo(pageNo);
            pageBean.setPageSize(pageSize);

            Page<School> page = new Page<>(pageNo, pageSize);
            QueryWrapper<School> wrap = new QueryWrapper<>();
            if (StringUtils.isNotBlank(key)) {
                wrap.like("name", key);
            }
            Page<School> schoolPage = iSchoolService.page(page, wrap);
            result.setDataList(schoolPage.getRecords());
            result.setPageBean(pageBean);
            result.setCode(1);
            result.setNote("成功");
        } catch (Exception e) {
            e.printStackTrace();
            result.setCode(-1);
            result.setMsg(e.getMessage());
            logger.error(e.getMessage());
        }
        result.setNote((result.getNote() == null || "".equals(result.getNote())) ? strError : result.getNote());
        return result;
    }


    /**
     * 根据年级id和学校id查询本校所有班级
     *
     * @return
     */
    @RequestMapping("/getClassListBySchoolIdAndGradeId")
    @ResponseBody
    public List<Clazz> getClassListBySchoolIdAndGradeId(@RequestParam("schoolId") Integer schoolId,
                                                 @RequestParam("gradeId") Integer gradeId,
                                                 @RequestParam("termId") Integer termId){
        List<Clazz> list = iClassService.list(new QueryWrapper<Clazz>().eq("school_id", schoolId)
                .eq("grade_id", gradeId)
                .eq("term_id", termId));
        return list;
    }


    /**
     * 查询系统年级列表
     *
     * @return
     */
    @RequestMapping("/querySysGradeList")
    @ResponseBody
    public List<SysGrade> querySysGradeList(){
        return iSysGradeService.list();
    }


    /**
     * 查询所有学生信息（按照年级班级排序）
     * jQueryAutocomplete插件过滤学校信息
     *
     * @param map
     * @return result
     */
    @RequestMapping("/listStudentAutocomplete")
    @ResponseBody
    public HashMap<String, List<StudentInfo>> listStudentAutocomplete(@RequestBody HashMap<String, Object> map) {
        String schoolId = map.get("schoolId").toString();
        int curTermId = Integer.parseInt(map.get("curTermId").toString());
        String key = map.get("key") == null ? "" : map.get("key").toString();
        Page<Map<String, Object>> page = new Page<>(1, 100000);
        QueryWrapper<Map<String, Object>> wrap = new QueryWrapper<>();

        wrap.eq("si.school_id", schoolId);
        wrap.eq("gcs.status", 1);
        HashMap<String, List<StudentInfo>> stringListHashMap = new HashMap<>();
        if (StringUtils.isNotBlank(key)) {
            wrap.and(i -> i.like("si.name", key).or()
                    .like("si.student_number", key).or()
                    .like("si.id_card", key));
        }else{
            return stringListHashMap;
        }


        Page<StudentInfo> studentInfoPage = studentInfoMapper.pageQueryStudentListByParam(page, wrap, curTermId);
        List<StudentInfo> records = studentInfoPage.getRecords();
        for (int i = 0; i < records.size(); i++) {
            StudentInfo x = records.get(i);
            String mKey = x.getGradeName() + x.getClassName();
            List<StudentInfo> list = stringListHashMap.get(mKey);
            if (list == null) {
                ArrayList<StudentInfo> studentInfos = new ArrayList<>();
                studentInfos.add(x);
                stringListHashMap.put(mKey,studentInfos);
            }else{
                list.add(x);
            }
        }


        return stringListHashMap;
    }

    /**
     * 查询所有教师信息（按照年级班级排序）
     * jQueryAutocomplete插件
     *
     * @param map
     * @return result
     */
    @RequestMapping("/listTeacherAutocomplete")
    @ResponseBody
    public List<Teacher> listTeacherAutocomplete(@RequestBody HashMap<String, Object> map) {
        List<Teacher> teachers = new ArrayList<>();

        String schoolId = map.get("schoolId").toString();
        String key = map.get("key") == null ? "" : map.get("key").toString();
        QueryWrapper<Teacher> wrap = new QueryWrapper<>();

        wrap.eq("school_id", schoolId);
        wrap.eq("status", 1);
        if (StringUtils.isNotBlank(key)) {
            wrap.and(i -> i.like("name", key).or()
                    .like("staff_number", key).or()
                    .like("mobilephone", key));
        }else{
            return teachers;
        }
        teachers = iTeacherService.list(wrap);

        return teachers;
    }


    public static void main(String[] args) {
        String[] strArr = new String[]{
                "初一一班",
                "初一二班",
                "六年级一班",
                "六年级二班",
                "三年级一班",
                "三年级三班",
                "高一二班",
                "高二二班"};
        TreeSet<String> strings = new TreeSet<>();
        for (int i = 0; i < strArr.length; i++) {
            strings.add(strArr[i]);

        }
        String[] NumberArr = new String[]{"一","二","三","四","五","六","七","八","九","十"};
        String[] GradeArr = new String[]{
        "一年级",
        "二年级",
        "三年级",
        "四年级",
        "五年级",
        "六年级",
        "七年级",
        "八年级",
        "九年级",
        "高一",
        "高二",
        "高三"};

        String str = "三年级三班";

        String a = str.substring(0, 2);
        System.out.println(a);

        System.out.println(123);
        TreeSet<String> objects = new TreeSet<>((s1, s2) -> {
            int r = 0;
            String substring = s1.substring(0, 2);
            return 1;
        });


    }


}
